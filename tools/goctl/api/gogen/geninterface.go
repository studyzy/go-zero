package gogen

import (
	"fmt"
	"os"
	"path"
	"strings"

	"github.com/zeromicro/go-zero/tools/goctl/api/spec"
	"github.com/zeromicro/go-zero/tools/goctl/config"
	"github.com/zeromicro/go-zero/tools/goctl/internal/version"
	"github.com/zeromicro/go-zero/tools/goctl/util/format"
	"github.com/zeromicro/go-zero/tools/goctl/util/pathx"
)

const (
	interfaceFilename = "interface"
	interfaceTemplate = `// Code generated by goctl. DO NOT EDIT.
// goctl {{.version}}

package client

import (
	{{.importPackages}}
)

type Client interface {
	{{.methods}}
}
`
)

func genMethod(dir, rootPkg string, cfg *config.Config, group spec.Group, route spec.Route) string {
	//{{.function}}({{.request}}) {{.responseType}}
	client := getClientName(route)
	function := strings.Title(strings.TrimSuffix(client, "Client"))
	request := ""
	requestType := requestGoTypeName(route, typesPacket)
	if len(requestType) > 0 {
		request = "req *" + requestType
	}
	var responseString string
	if len(route.ResponseTypeName()) > 0 {
		resp := responseGoTypeName(route, typesPacket)
		responseString = "(" + resp + ", error)"
	} else {
		responseString = "error"
	}
	return fmt.Sprintf("\t%s(%s) %s\n", function, request, responseString)
}

func genInterface(dir, rootPkg string, cfg *config.Config, api *spec.ApiSpec) error {
	var builder strings.Builder

	for _, g := range api.Service.Groups {
		for _, r := range g.Routes {
			method := genMethod(dir, rootPkg, cfg, g, r)
			builder.WriteString(method)
		}
	}

	var hasTimeout bool

	interfaceFilename, err := format.FileNamingFormat(cfg.NamingFormat, interfaceFilename)
	if err != nil {
		return err
	}

	interfaceFilename = interfaceFilename + ".go"
	filename := path.Join(dir, clientDir, interfaceFilename)
	os.Remove(filename)

	return genFile(fileGenConfig{
		dir:             dir,
		subdir:          clientDir,
		filename:        interfaceFilename,
		templateName:    "interfaceTemplate",
		category:        category,
		templateFile:    interfaceTemplateFile,
		builtinTemplate: interfaceTemplate,
		data: map[string]any{
			"hasTimeout":     hasTimeout,
			"importPackages": genInterfaceImports(rootPkg, api),
			"methods":        strings.TrimSpace(builder.String()),
			"version":        version.BuildVersion,
		},
	})
}

func genInterfaceImports(parentPkg string, api *spec.ApiSpec) string {
	var imports []string
	imports = append(imports, fmt.Sprintf("\"%s\"\n", pathx.JoinPackages(parentPkg, typesDir)))
	return strings.Join(imports, "\n\t")
}
